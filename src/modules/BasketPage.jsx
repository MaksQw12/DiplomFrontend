import '../styles/BasketPage.css';
import React, { useContext, useEffect, useState } from 'react';
import { observer } from 'mobx-react-lite';
import { Context } from '../main';
import BasketPageCart from './BasketPageCart';
import emailjs from 'emailjs-com';
const BasketPage = () => {
  const { basketStore } = useContext(Context);
  const userId = localStorage.getItem('userId');
  const productId = localStorage.getItem('productId');
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    const fetchBasket = async () => {
      await basketStore.getBasketForPage(userId);
      setLoading(false);
    };

    fetchBasket();
  }, [basketStore, userId]);

  const handleDelete = async (basketItemId) => {
    await basketStore.deleteBasket(basketItemId);
    await basketStore.getBasketForPage(userId);
  };

  if (loading) {
    return <div>Loading...</div>;
  }
  const email = localStorage.getItem('userEmail');
  const handleOrder = async () => {
    if (basketStore.basketUser.length === 0) {
      alert('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }
    const productNames = basketStore.basketUser.map((item) => item.product.productName).join(', ');
    const templateParams = {
      to: email,
      subject: '–í–∞—à –∑–∞–∫–∞–∑',
      message: `–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${basketStore.totalCost} ‚ÇΩ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã: ${productNames}. –ú—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤–∞–º –ø–æ –ø–æ—á—Ç–µ –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∏—Ö –ø–æ –∞–¥—Ä–µ—Å—É: –ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –û–±–æ—è–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥ –û–±–æ—è–Ω—å.`,
    };

    try {
      const response = await emailjs.send(
        'service_g7andhc',
        'template_c6tfj1i',
        templateParams,
        'cLLuXpJhz5SI85CSs',
      );
      if (response.status === 200) {
        console.log('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—á—Ç—É');
        alert('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—á—Ç—É');

        await basketStore.deleteAll(userId);
        await basketStore.getBasketForPage(userId);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞');
    }
  };
  const idUser = localStorage.getItem('userId');
  const idProduct = localStorage.getItem('productId');
  const handleDecrease = async (basketItemId) => {
    const basketItem = await basketStore.getBasketItem(userId, productId);
    const item = basketStore.basketUser.find((item) => item.id === basketItemId);
    if (item && item.count > 1) {
      await basketStore.updateBasketItem(basketItem.id, {
        id: basketItem.id,
        idUser,
        idProduct,
        count: basketItem.count - 1,
      });
      await basketStore.getBasketForPage(userId);
    }
  };

  const handleIncreaseCount = async (basketItemId) => {
    const basketItem = await basketStore.getBasketItem(userId, productId);
    const item = basketStore.basketUser.find((item) => item.id === basketItemId);
    if (item) {
      await basketStore.updateBasketItem(basketItem.id, {
        id: basketItem.id,
        idUser,
        idProduct,
        count: basketItem.count + 1,
      });
      await basketStore.getBasketForPage(userId);
    }
  };

  return (
    <div className="container-basket">
      {basketStore.basketUser.length === 0 ? (
        <div className="empty-basket-message">
          <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
          <div className="sad-face">üò¢</div>
        </div>
      ) : (
        <>
          <div className="content-cart-basket">
            {basketStore.basketUser.map((item) => (
              <BasketPageCart
                key={item.id}
                id={item.id}
                productName={item.product.productName}
                count={item.count}
                price={item.product.price}
                image={item.product.image}
                onDelete={() => handleDelete(item.id)}
                onIncrease={() => handleIncreaseCount(item.id)}
                onDecrease={() => handleDecrease(item.id)}
              />
            ))}
          </div>

          <div className="content-button">
            <h5>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {basketStore.totalCost} ‚ÇΩ</h5>
            <button className="content-element-button" onClick={handleOrder}>
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default observer(BasketPage);
